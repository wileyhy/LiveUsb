#!/bin/bash -Ceux
# setup_firewall()

shopt -s expand_aliases

declare -nx nL=L\INENO
fn_bndry_sh=" ~~~ ~~~ ~~~ "
fn_bndry_lo=" ~~~ ~~~ ~~~  ~~~ ~~~ ~~~  ~~~ ~~~ ~~~  ~~~ ~~~ ~~~ "
fn_lvl=0
scr_nm="LiveUsb1.sh"

alias als_function_boundary_in='local - _="${fn_bndry_lo} ${fn_bndry_sh} ${FUNCNAME[0]}() BEGINS ${fn_bndry_sh} ${fn_lvl} to $(( ++fn_lvl ))" loc_hyphn="$-" loc_exit_code="${EC:-$?}" loc_lineno="${LN:-$nL}"'

alias als_function_boundary_out='true "${fn_bndry_lo} ${FUNCNAME[1]}()  ENDS  ${fn_bndry_sh} ${fn_lvl} to $(( --fn_lvl ))"'

function error_and_exit(){ als_function_boundary_in
  set -x

  ## Some positional parameters must exist
  [[ $# -lt 1 ]] && return 1

  ## The first positional parameter must be a digit, and should be the LINENO from where error_and_exit() is called
  if ! [[ $1 = [0-9]* ]]
  then
    printf '\n%s, %s, Error, first positional parameter must be a line number\n\n' "${scr_nm}" "${FUNCNAME[0]}"
    return 2
  fi

  local loc_lineno
  loc_lineno="$1"
  shift

  printf '%s, Error, line %d, %s\n' "${scr_nm}" "${loc_lineno}" "$*" >&2
  LN="${loc_lineno}" builtin exit "${loc_exit_code}"
}

alias die='error_and_exit "${nL}"'

:;: "Define trap_exit()"
## Note: these variable assignments must be on the 1st line of the funtion in order to capture correct data
# shellcheck disable=SC2317
function trap_exit(){ als_function_boundary_in
  set -x

  trap - EXIT

  #if [[ ${loc_exit_code} = 00 ]]
  #then
    #: "End of script, line ${lineno}"
  #else
    #: "End of EXIT trap"
  #fi

  builtin exit "${loc_exit_code}"
}

## Vars
default_lockdown_whitelist_cmd="/usr/bin/python3 -sP /usr/bin/firewall-config"
list_rpms=( firewall-config macchanger python3 rfkill )
log_deny="unicast"
svc="firewalld.service"
target_def_zn="drop"
readonly default_lockdown_whitelist_cmd list_rpms log_deny svc target_def_zn


## Need rpms
if ping -c1 8.8.8.8 2>/dev/null 1>&2
then
  sudo -- dnf -y install "${list_rpms[@]}" || die
  sudo -- dnf -y upgrade "*firewall*"
fi

## Need running service
systemctl is-enabled "${svc}" || sudo -- systemctl enable "${svc}"
systemctl is-active "${svc}" || sudo -- systemctl start "${svc}"


## Need running firewall
XX="1st_attempt" YY="" ZZ=""

while true
do
	## If the firewall isn't running, then...
	if ! [[ "$( firewall-cmd --state )" = "running" ]]
	then
		## ...on the first attempt...
		if [[ -n ${XX} ]] 
		then
			## ...just try to reload/restart it
			sudo -- systemctl try-reload-or-restart "${svc}"

			## And mark step one as done
			XX="" YY="2nd_attempt"

		## ...on the second attempt...
		elif [[ -n ${YY} ]]
		then	
			## ...parse `systemctl status`, and...
			KK=$( systemctl status "${svc}" | 
				awk '/\s*Active:/ { print $2 }' )

			## ...if it isn't active, then...
			if ! [[ ${KK} = "active" ]]
			then
				## ...unmask, enable, start...
				sudo -- systemctl stop "${svc}"
				sudo -- systemctl unmask "${svc}"	
				sudo -- systemctl enable "${svc}"	
				sudo -- systemctl start "${svc}"

				## ...and mark step two as done.
				YY="" ZZ="3rd_attempt"
			fi
			unset KK

		## ...on the third attempt, error out.
		elif [[ -n ${ZZ} ]]
		then
			die Firewall is down
		fi
  else 
    break
  fi
done
unset XX YY ZZ


## Zone
if ! [[ "$( firewall-cmd --get-default-zone )" = "${target_def_zn}" ]]
then
	sudo -- firewall-cmd --set-default-zone="${target_def_zn}"

	if ! [[ "$( firewall-cmd --get-default-zone )" = "${target_def_zn}" ]]
	then	
		die Firewall zone failed to apply
	fi
fi


## Interfaces
declare -a ip_a_interfaces fwc_assigned_ifcs

## Get the lists of available and assigned (non-loopback) network interfaces
readarray -d "" -t ip_a_interfaces < <( 
  ip a | 
    awk -F": " '$1 ~ /[0-9]{1,2}/ && $2 ~ /[[:alnum:]]/ && $2 !~ /\<lo\>/  { printf "%s\0", $2 }' | 
    sort -z )
readarray -d "" -t fwc_assigned_ifcs < <( 
  firewall-cmd --zone="${target_def_zn}" --list-interfaces | 
    awk 'BEGIN { RS=" " }; { printf "%s\0", $1 }' | 
    sort -z )

## If the counts and strings of each list are not the same, then...
if ! [[ "${#ip_a_interfaces[@]}" -eq "${#fwc_assigned_ifcs[@]}" ]] ||
	! [[ "${ip_a_interfaces[*]}" = "${fwc_assigned_ifcs[*]}" ]]
then
	## ...add each found interface to the default zone...
	for QQ in "${ip_a_interfaces[@]}"
	do
		sudo -- firewall-cmd --zone="${target_def_zn}" --add-interface="${QQ}"
	done

	## ...then verify it. Get the list of assigned interfaces again...
	unset fwc_assigned_ifcs
	readarray -d "" -t fwc_assigned_ifcs < <( 
    firewall-cmd --zone="${target_def_zn}" --list-interfaces | 
      awk 'BEGIN { RS=" " }; { printf "%s\0", $1 }' | 
      sort -z )

	## ...and if the counts and strings of each list are not the same again, then error out.
	if ! [[ "${#ip_a_interfaces[@]}" -eq "${#fwc_assigned_ifcs[@]}" ]] ||
    ! [[ "${ip_a_interfaces[*]}" = "${fwc_assigned_ifcs[*]}" ]]
	then
		die
	fi
fi
#unset ip_a_interfaces fwc_assigned_ifcs


## Sources
[[ -z "${ip_a_interfaces[*]}" ]] && die

## Need interfaces down
for II in "${ip_a_interfaces}"
do
  ifc_state=$( nmcli | awk '$1 ~ /^wlo1/ { print $2 }' )
	if [[ ${ifc_state} = "connected" ]]
  then
    nmcli d disconnect "${II}"
  fi
  unset ifc_state
done
unset II

## For each (non-loopback) interface on the system...
unset all_sys_real_and_fake_macs

for HH in "${ip_a_interfaces[@]}"
do
	## ...reset to permanent MAC addresses, change to a spoofed MAC...
	sudo -- macchanger -p "${HH}"
	sudo -- macchanger -ae "${HH}" || die
	
	## ...and get those MAC addresses (real and fake)
	readarray -t macs_per_ifc < <( macchanger -s "${HH}" | 
		grep -oEe '\<([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})\>' )

	for KK in "${macs_per_ifc[@]}"
	do
		all_sys_real_and_fake_macs+=( "${KK}" )
	done
	unset KK
done
unset HH

## Get the list of real MAC's directly from `ip a`, just in case
readarray -d "" -t ip_a_macs < <( 
  ip a | 
    grep -zoEe '\<([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})\>' | 
    grep -zve '00:00:' -e 'ff:ff:' )

## Add MAC's from `ip a` to the MAC's from `macchanger`
for LL in "${ip_a_macs[@]}"
do
	all_sys_real_and_fake_macs+=( "${LL}" )
done
unset LL

fwc_zone_srcs=$( firewall-cmd --zone="${target_def_zn}" --list-sources )

## For each of the MAC addresses in the full list...
for MM in "${all_sys_real_and_fake_macs[@]}"
do
	## ...if it hasn't been added to the default zone yet...
	if ! [[ "${fwc_zone_srcs}" =~ "${MM}" ]]
	then
		## ...then add it
		sudo -- firewall-cmd --zone="${target_def_zn}" --add-source="${MM}"
	fi
done
unset MM


## Forwarding
firewall-cmd --zone="${target_def_zn}" --remove-forward


## Log denied
firewall-cmd --set-log-denied="${log_deny}"


## Lockdown whitelists

## Note, Security, Hard code the defaults here, so that if they#re changed 
#+  above in-script, or changed in the rpm, some logging of the change will 
#+  also occur.

## Hard-coded sha1 hash of default lockdown whitelist command. The sha1 hash 
#+  is of the whitelist commandline itself; this is why a `printf` is 
#+  necessary at assignment of $lgr_cmd_0
ro_hard_coded_sha1="a5a8aaea19f048850865ba553fe1f4edd5319d73"
ro_hard_coded_wl_cmd="/usr/bin/python3 -sP /usr/bin/firewall-config"
lgr_cmd_0='declare -p ro_hard_coded_sha1 ro_hard_coded_wl_cmd'

## Note, lgr_cmd_1, Yes, this escape-of-a-single-quote syntax is correct.
lgr_cmd_1='printf "%s\\n" "${default_lockdown_whitelist_cmd}" | sha1sum | awk '\''{ print $1 }'\' 
readonly ro_hard_coded_sha1 ro_hard_coded_wl_cmd

## If the hashes of the command strings are different, 
if ! [[ "$( eval "${lgr_cmd_1}" )"  = ${ro_hard_coded_sha1} ]]
then
  ## There#s an `eval` below, so single-quoting each entire command string (ie, 
  #+  in the $lgr_cmd_[0-9]* variables) is also necessary, in order to abide by 
  #+  bash-5#s word-splitting rules.
  
  log_discrepancy()
  {
    local -
    set -x
    
    [[ "$#@" -eq 1 ]] || die

    local AA
    local -n BB
    local base_var_name range_digits
    base_var_name="${1%_*}"
    readarray -t range_digits < <( seq "${1##*_}" "$2" )

    for AA in "${range_digits[@]}"
    do
      declare -n BB="${base_var_name}_${AA}"
      logger -- "\"${BB[@]}\""\: "$( eval "${BB[@]}" )"
    done
    
    unset AA
    unset -n BB
    unset base_var_name range_digits
  }
  log_discrepancy lgr_cmd_0 1
fi

exit

readarray -t fwc_llw_cmds < <(
  firewall-cmd --list-lockdown-whitelist-commands )

for CC in "${fwc_llw_cmds[@]}"
do
  
firewall-cmd --add-lockdown-whitelist-command="${ro_hard_coded_wl_cmd}"

readarray -t fwc_llw_cntxts
firewall-cmd --list-lockdown-whitelist-contexts
firewall-cmd --remove-lockdown-whitelist-context=


readarray -t fwc_llw_uids
firewall-cmd --list-lockdown-whitelist-uids
firewall-cmd --remove-lockdown-whitelist-uid=


readarray -t fwc_llw_usrs
firewall-cmd --list-lockdown-whitelist-users



which python3
which firewall-config
firewall-cmd --lockdown-on
firewall-cmd --lockdown-off
getenforce
sestatus
firewalld --runtime-to-permanent
firewall-cmd --runtime-to-permanent
firewall-cmd --zone --list-all
firewall-cmd --zone="${target_def_zn}" --list-all
firewall-cmd --query-lockdown
firewall-cmd --lockdown-off
firewall-cmd --stae
firewall-cmd --state
dnf needs-restarting
systemctl try-reload-or-restart "${svc}" 
date
firewall-cmd --query-lockdown
history | grep firewall-cmd
firewall-cmd --list-lockdown-whitelist-commands; firewall-cmd --list-lockdown-whitelist-contexts; firewall-cmd --list-lockdown-whitelist-uids; firewall-cmd --list-lockdown-whitelist-users
firewall-cmd --remove-lockdown-whitelist-context=system_u:system_r:NetworkManager_t:s0 --remove-lockdown-whitelist-context=system_u:system_r:virtd_t:s0-s0:c0.c1023; firewall-cmd --remove-lockdown-whitelist-uid=0
firewall-cmd --list-lockdown-whitelist-commands; firewall-cmd --list-lockdown-whitelist-contexts; firewall-cmd --list-lockdown-whitelist-uids; firewall-cmd --list-lockdown-whitelist-users
history | grep firewall-cmd
history | grep list-all
firewall-cmd --zone="${target_def_zn}" --list-all
history | grep source
firewall-cmd --zone="${target_def_zn}" --add-source=12:59:e7:e4:18:43 --add-source=20:79:18:b0:59:1e #--add-interface=wlo1 --remove-forward
firewall-cmd --zone="${target_def_zn}" --list-all
which macchanger
which rfkill
sudo -- macchanger wlo1
sudo -- macchanger -ab wlo1
sudo -- macchanger -a wlo1
sudo -- macchanger -p wlo1
sudo -- macchanger -a wlo1
sudo -- macchanger -p wlo1
sudo -- macchanger -ae wlo1
sudo -- macchanger -abe wlo1
sudo -- macchanger -ae wlo1
ip a
firewall-cmd --zone="${target_def_zn}" --add-source=20:79:18:d5:ec:f9 --add-source=20:79:18:b0:59:1e --add-source=20:79:18:2b:e0:63 #--add-interface=wlo1 --remove-forward
firewall-cmd --zone="${target_def_zn}" --list-all
firewall-cmd --zone="${target_def_zn}" --add-interface=wlo1
firewall-cmd --zone="${target_def_zn}" --list-all
firewall-cmd --zone="${target_def_zn}" --remove-forward
firewall-cmd --zone="${target_def_zn}" --list-all
firewall-cmd --set-log-denied="${log_deny}"
firewall-cmd --zone="${target_def_zn}" --list-all
history | grep firewall-cmd
firewall-cmd --state
firewall-cmd --get-default-zone
firewall-cmd --zone="${target_def_zn}" --list-all
firewall-cmd --list-all
history | grep firewall-cmd
firewall-cmd --list-lockdown-whitelist-commands; firewall-cmd --list-lockdown-whitelist-contexts; firewall-cmd --list-lockdown-whitelist-uids; firewall-cmd --list-lockdown-whitelist-users
firewall-cmd --list-all
firewall-cmd --lockdown-on
firewall-cmd --lockdown-off
firewall-cmd --list-all
firewall-cmd --runtime-to-permanent
firewall-cmd --list-all
systemctl try-reload-or-restart "${svc}" 
firewall-cmd --list-all
firewall-cmd --state
systemctl status "${svc}" 
firewall-cmd --query-lockdown
firewall-config
bg
systemctl status "${svc}" 
firewall-cmd --query-lockdown
firewall-cmd --state
firewall-cmd --list-all
systemctl status 
history > hist
vim hist 
history | cut -c 8- | head
history | cut -c 8- > hist



sudo -- firewall-cmd --set-default-zone="${target_def_zn}"
sudo -- systemctl start "${svc}"
sudo -- firewall-cmd --set-default-zone="${target_def_zn}"
ip a
sudo -- firewall-cmd --zone="${target_def_zn}" --add-interface=wlo1
sudo -- firewall-cmd --zone="${target_def_zn}" --add-source=52:81:c8:e7:33:f9 --add-source=20:79:18:b0:59:1e
sudo -- firewall-cmd --zone="${target_def_zn}" --remove-forward
sudo -- firewall-cmd --set-log-denied="${log_deny}"
sudo -- firewall-cmd --zone="${target_def_zn}" --list-all
sudo -- firewall-cmd --query-forward
sudo -- firewall-cmd --remove-forward
sudo -- firewall-cmd --zone="${target_def_zn}" --list-all
sudo -- firewall-cmd --zone="${target_def_zn}" --add-source=52:81:c8:e7:33:f9 --add-source=20:79:18:b0:59:1e
sudo -- firewall-cmd --zone="${target_def_zn}" --add-interface=wlo1
sudo -- firewall-cmd --zone="${target_def_zn}" --list-all
sudo -- firewall-cmd --query-lockdown
sudo -- firewall-cmd --lockdown=on
sudo -- firewall-cmd --lockdown-on
sudo -- firewall-cmd --query-lockdown
sudo -- firewall-cmd --runtime-to-permanent
sudo -- firewall-cmd --check-config || die
sudo -- firewall-cmd --reload
sudo -- firewall-cmd --zone="${target_def_zn}" --list-all
sudo -- firewall-cmd -

