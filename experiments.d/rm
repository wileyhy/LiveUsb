#!/bin/bash -xeu

rm () {   
    local - && set +x
    :
    : 'Some input must exist'
    [[ ${#@} -eq 0 ]] && return "${LINENO}"
    :
    : 'Set variables; force PATH searches using a hardcoded value for PATH'
    ## Note, once a variable is ...activated? with `local -g`, all subsequent operations with `local` must 
    #+  also incluse '-g'
    unalias -a
    hash -r
    local -Ig PATH
    PATH='/usr/bin:/usr/sbin'
    local -gr PATH 
    local binary_rm 
    binary_rm=$(type -P rm)
    local -r binary_rm
    local binary_rpm
    binary_rpm=$(type -P rpm)
    :
    set -v
    : 'Must use GNU rm and a current version of Bash'
    local rm_version
    rm_version=$("${binary_rm}" --version 2>&1 | head -1)
    :
    if ! [[ "${rm_version}" =~ GNU ]] || [[ ${BASH_VERSINFO:-0} -le 4 ]]
    then
        printf '\n\tError, GNU `rm` and Bash 5 are required; removing this function.\n\n'
        unset 'rm'
        unset -f 'rm'
        unset -n 'rm'
        "${binary_rm}" "$@"
        return "$?"
    fi
    :
    : 'Verify binary and related system files'
    local BB verify_fail
    verify_fail=''
    :
    for BB in "${binary_rm}" "${binary_rpm}" "${BASH}" /usr/bin/sh /bin/sh /usr/bin/python3 /usr/bin/gpg
    do
        if ! "${binary_rpm}" -Vf "${BB}"
        then
            printf '\n\tError, file fails `rpm -Vf`: %s\n\n' "${BB}"
            verify_fail=yes
        fi
    done
    :
    if [[ ${verify_fail} = 'yes' ]]
    then
        return 1
    fi
    unset BB binary_rpm verify_fail
    :
    : $'Place some guardrails on the \x60rm\x60 command'
    local opts_rm
    opts_rm+=(--one-file-system --preserve-root=all --verbose)
    :
    : '"At" Daemon must be running'
    local systemctl_ec service_name
    service_name=atd.service
    :
    systemctl --quiet is-active "${service_name}"
    systemctl_ec="$?"
    case "${systemctl_ec}" in
        0)  : "${service_name}"' is active'
            ;;\
        3)  : "${service_name}"' is inactive'
            systemctl enable "${service_name}" || return "${LINENO}"
            systemctl start "${service_name}" || return "${LINENO}"
            ;;\
        1 | 2 | *)
            printf '\n\tError, line %d, atd.service unit state unknown, exit code %d\n\n' "${LINENO}" "${systemctl_ec}"
            ;;\
    esac
    unset systemctl_ec service_name
    :
    : 'Begin Options loop. For each positional parameter...'
    local HH end_of_options args_rm
    for HH in "$@"
    do
        : 'If "End of Options" has not yet been reached...'
        if ! [[ ${end_of_options:=} =~ has_been_reached ]]
        then
            case "${HH}" in
                --version)
                    "$( type -P rm )" --version
                ;;\
                --help)
                  "$( type -P rm )" --help
                ;;\
                --)
                    end_of_options='has_been_reached__hyphen'
                    opts_rm+=("${HH}")
                    #declare -p opts_rm
                    shift
                    break
                ;;\
                -f | --force | -i | --interactive | --interactive=always | -I | --interactive=once | --interactive=never | --one-file-system | --no-preserve-root | --preserve-root | --preserve-root=all | -r | -R | --recursive | -d | --dir | -v | --verbose)
                    opts_rm+=("${HH}")
                    #declare -p opts_rm
                ;;\
                *)
                    : 'Options have concluded'
                    end_of_options='has_been_reached__asterisk'
                    : 'If there is no next pos-parm'
                    if [[ -z ${2:-} ]] || ! [[ $2 = -- ]]
                    then
                        : '...then force end of options on the CLI'
                        opts_rm+=(--)
                        #declare -p opts_rm
                    else
                        : '...or if the next pos-parm isn`t a valid FSO (File System Object)'
                        if ! [[ -e $2 ]] || ! [[ -d $2 ]]
                        then
                            : '...then force end of options on the CLI'
                            opts_rm+=(--)
                            #declare -p opts_rm
                        fi
                    fi
                    break
                ;;\
            esac
        fi
        : 'Restart loop with next positional parameter'
        shift
    done
    unset HH
    : 'End of Options loop'
    :
    : 'If there are any positional parameters left...'
    if [[ ${#@} -gt 0 ]]
    then
        : 'Begin Operands loop'
        local KK
        for KK
            do
            if [[ -e ${KK} ]]
            then
                local JJ
                JJ=$(realpath -e "${KK}")
                args_rm+=("${JJ}")
                #declare -p args_rm
                unset JJ
                shift
            else
                : 'fn_rm: cannot access:' "${KK}"
                : 'No such file or directory'
                : $'GNU \x60rm\x60 silently ignores such inputs'
                shift
            fi
        done
        unset KK
        : 'End of Operands loop'
    else
        : $'...and there aren\x60t any more positional parameters left'
    fi
    :
    : 'Sanity check for options and operands'
    local QQ double_hyphen_present
    double_hyphen_present=''
    :
    for QQ in "${opts_rm[@]}"
    do
        if [[ ${QQ} = '--' ]]
        then
            double_hyphen_present='yes'
        fi
    done
    unset QQ
    :
    if ! [[ ${double_hyphen_present} = 'yes' ]]
    then
        opts_rm+=(--)
    fi
    unset double_hyphen_present
    :
    : '"Recycle bin" must exist'
    local recycle_bin
    recycle_bin=~/.recycle.bin
    readonly recycle_bin
    :
    if [[ -L ${recycle_bin} ]]
    then
        printf 'rm(): Error: %s is a symlink! Aborting\n' "${recycle_bin/~/'~'}"
        return
    elif ! [[ -d ${recycle_bin} ]]
    then
        command -- mkdir --mode 0700 --verbose -- "${recycle_bin}" || return "$LINENO"
    fi
    :
      #declare -p opts_rm args_rm
    :
    : 'If operands exist...'
    if [[ -n ${args_rm[*]: -1:1} ]]
    then
        local at_time
        at_time='now +72 hours'

        for QQ in "${args_rm[@]}"
        do  :
            : 'Get the current time'
            local time_sfx target_f
            time_sfx=$(date '+%a-%d-%b-%R:%S')
            :
            : 'Define the target filename'
            target_f="${recycle_bin}/${time_sfx}.${QQ##*/}"
            :
            : 'Move the file into the recycle bin'
            command -- mv --verbose -- "${QQ}" "${target_f}" || return "$LINENO"
            :
            : $'Build \x60at\x60 command'
            local rm_cmd
            rm_cmd=$(type -P rm)
            rm_cmd+=$(printf ' %s' "${opts_rm[@]}" "${args_rm[@]}")
            :
            : 'Schedule file removal'
            printf '%blogger --id="%d" -- %s\n%b' '\x27' "$$" "${rm_cmd[*]}" '\x27' | 
              at -M -u "$(logname)" "$at_time" 2>&1 | 
              grep -v 'warning: commands will be executed using /bin/sh'
        done
        unset QQ
    else
        : 'No operands exist'
    fi
}
declare -fx rm

set -x
#rm "$@"

declare -pf rm

