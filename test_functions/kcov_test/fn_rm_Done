#!/bin/bash -x
## fn_rm -- a function for sending deleted files (etc.) to a "Recycle Bin"
#+  Written in bash 5.2
#+  Copyright 2023, Wiley Houston Young


: 'Vars and traps'
delete_d=~/.rm.d
trap_rtn(){
  declare -p opts_rm args_rm fn_command_line
  command -- rm -vf -- "${delete_d}"/*
}
trap trap_rtn RETURN

: 'Define rm()'
rm ()
{
  local - 
  #set -

  local fn_command_line
  fn_command_line="${FUNCNAME[0]} $*"
 
  :;: 'Input must exist'
  [[ ${#@} -eq 0 ]] && return "$LINENO"
    
  :;: 'For each positional parameter'
  local HH end_of_options opts_rm args_rm
  
  : 'Begin loop'
  for HH
  do
    : 'If "End of Options" has (not) been reached'
    if ! [[ ${end_of_options:=} = 'has_been_reached' ]]
    then
      case "${HH}" in
        --version )
          command -- rm --version
          ;;
        --help )
          command -- rm --help
          ;;
        -- )
          end_of_options='has_been_reached'
          opts_rm+=( "${HH}" )
          ;;    
        -f|--force|-i|--interactive|--interactive=always|-I|--interactive=once|--interactive=never|\
        --one-file-system|--no-preserve-root|--preserve-root|--preserve-root=all|-r|-R|--recursive|\
        -d|--dir|-v|--verbose )
          opts_rm+=( "${HH}" )
          ;;    
        * )
          : 'No more options found; options have concluded'
          end_of_options='has_been_reached'
          
          : 'Force end of arguments on the commandline (ie, add a "--" to separate options from arguments)...'
          : '...IF there is no next positional parameter...'          
          if       [[ -z ${2:-} ]];
          then                      opts_rm+=( -- )  
	                                  ## fall through means, there is a next positional parameter
          else
            : '...OR IF the next positional parameter is not "--"...'
            if   ! [[ $2 = -- ]]  ;
            then                    opts_rm+=( -- )  
                                    ## fall through means, the next positional parameter is "--"
            else
              : '...OR IF the next positional parameter does exist on disk (ie, "--" could be a filename)'
              if   [[ -e $2 ]]    ;
              then                  opts_rm+=( -- )  
                                    ## fall through means, the next positional parameter does not exist on disk 
                                    #+  (ie, and is "--" )
              fi
            fi
          fi

          if [[ -e ${HH} ]]
          then
            local JJ
            JJ=$( realpath -e "${HH}" )
            args_rm+=( "${JJ}" )
            unset JJ
          else
            : $'rm: unrecognized option \x27'"${HH}"$'\x27\nTry \x27rm --help\x27 for more information.'
          fi
          ;;
      esac
    else 

      : 'Yes, so options are over and only arguments are processed'
      if [[ -e ${HH} ]]
      then
        local II
        II=$( realpath -e "${HH}" )
        args_rm+=( "${II}" )
        unset II
      else
        : $'fn_rm: cannot access \x27'"${HH}"$'\x27: No such file or directory\nGNU \x60rm\x60 ignores such inputs'
      fi
    fi

    : 'Restart loop'
    shift
  done
  : 'End of loop'

  : 'Sanity check for options and arguments'
  [[ -z ${opts_rm:=} ]] && opts_rm=( -- )

  :;: '"Recycle bin" must exist'
  local delete_d
  delete_d=~/.rm.d

  if ! [[ -e ${delete_d} ]] || ! [[ -d ${delete_d} ]]
  then
      command -- mkdir --mode 0700 --verbose -- "${delete_d}" || return $LINENO
  fi

  :;: 'If optargs exist, then  mv  the file into the recycle bucket, appending the time'
  if [[ -n ${args_rm[*]:0:8} ]]
  then
    local time_sfx 
    time_sfx=$( date --utc +%s )
    
    command -- mv --verbose -- "${HH}" "${delete_d}/${HH}.${time_sfx}" || return $LINENO
  fi
}
declare -fxt rm

touch foo 

## Command              ## Syntax           ## P/F    ## kcov   ## Test no.
#rm foo                 ##   success           Pass    69.7%     1

#rm -f foo              ##   success           Pass    71.2%     2
#rm foo -f              ##   Invalid input     Pass    77.3%     3

#rm -- foo              ##   success           Pass    65.2%     4
#rm foo --              ##   Invalid input     Pass    80.3%     5

#rm -f -- foo           ##   success           Pass    66.7%     6
#rm -- -f foo           ##   Invalid input     Pass    68.2%     7
#rm -f foo --           ##   Invalid input     Pass    81.8%     8
#rm foo -f --           ##   Invalid input     Pass    77.3%     9
#rm foo -- -f           ##   Invalid input     Pass    80.3%    10
#rm -- foo -f           ##   Invalid input     Pass    68.2%    11

#rm --version           ##   success           Pass    51.5%    12
#rm --help              ##   success           Pass    51.5%    13
#rm --preserve-root -v  ##   Invalid input     Pass    51.5%    14

#rm --debug -f foo      ##  15

[[ -f foo ]] && command -- rm -i -- foo
exit 00

