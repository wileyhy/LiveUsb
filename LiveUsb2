#!/bin/bash -x
## LiveUsb2

## Note: Online Git Pro book:
#+  https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository

# <> Debugging
set -aCuTeo pipefail # <>

umask 077
hash -r

: 'Environment'
declare -n nL=L\INENO
PATH='/usr/bin:/usr/sbin' || exit "${nL}"
scr_repo_nm=scf
fn_bndry=' ~~~ ~~~ ~~~ '
fn_lvl=0

: 'Functions'
function er_x(){ \
  local - exit_code="$?" _="${fn_bndry} er_x() BEGINS ${fn_bndry} ${fn_lvl} to $(( ++fn_lvl ))"
  set -
  printf '%s: Error: %s \n' "$0" "$*" 1>&2
  exit "${exit_code}"
}

: 'Regular users only'
if [[ ${UID} = 0 ]]
then
  printf '\n\t Must be a regular user and use sudo. \n\n'
  exit "${nL}"
else
  sudo --validate || exit "${nL}"
fi

: 'Network'

## Note: `ping` doesn't have any long options. `ping -c` is "count;" `ping -W` is "timeout."

if ! sudo -- ping -c 1 -W 15 -- 8.8.8.8 > /dev/null
then
  sudo -- systemctl start NetworkManager.service
  wait -f
  sleep 15
  sudo -- ping -c 1 -W 15 -- 8.8.8.8 > /dev/null || exit "${nL}"
fi

## Note: git ui colors: normal black red green yellow blue
#+     magenta cyan white
#+  git ui attributes: bold dim ul (underline blink reverse)

## Bug? in vim, when quoting 'EOF', $tmpd changes color, but bash still expands the redirection
  #+ destination file.

## Note: In vim, since 'expandtab` is set in .vimrc, to make some actual tabs,
#+  press Ctrl-v-[tab]

: 'Git'

: 'Permissions'
unset git_files_a ff

git_files_a=( /etc/git* /etc/.git* )

for ff in "${git_files_a[@]}"
do
  [[ -e ${ff} ]] && sudo -- chmod 0604 -- "${ff}"
done
unset git_files_a ff

: 'Config'
unset git_conf_sys git_keys

git_conf_sys=$( sudo -- git config --system )

unset gitmesg gitignr
gitmesg=/etc/.gitmessage_system
gitignr=/etc/.gitignore_system

: 'Git: config -- unsetting'
if sudo -- git config --system --list | grep -q gpg.format
then
  sudo -- git config --system --unset gpg.format 
fi

git_keys=(
  [user.name]='Wiley Young'
  [user.email]='84648683+wileyhy@users.noreply.github.com'
  [core.editor]='vim'
  [core.pager]='/usr/bin/less'
  [help.autocorrect]='prompt'
  [init.defaultBranch]='main'
  [commit.gpgsign]='true'
  [gpg.program]='gpg2'
  [user.signingkey]='E287D0CF528591CE'
  [color.diff]='always'
  [color.diff.meta]='blue black bold'
  [color.interactive]='always'
  [color.ui]='true'
  [color.ui]='auto'
  [commit.template]="${gitmesg}"
  [core.excludesfile]="${gitignr}"
)

: 'Git: config -- assigning'
for ii in "${git_keys[@]}"
do
  if ! grep --quiet "${git_keys[$ii]}" <<< "${git_conf_sys[@]}"
  then
    sudo -- git config --system "${ii}" "${git_keys[$ii]}"
  fi
done
unset ii git_keys git_conf_sys

: 'gitmessage'
unset TMPDIR tmpd
tmpd=$( mktemp --directory )
if ! [[ -f ${gitmesg} ]]
then
  cat <<- \EOF > "${tmpd}/msg"
	Subject line (try to keep under 50 characters)

	Multi-line description of commit,
	feel free to be detailed.

	[Ticket: X]

	EOF

  # shellcheck disable=SC2024 #(info): sudo doesn't affect redirects. Use sudo cat file | ..

  sudo -- tee -- "${gitmesg}" < "${tmpd}/msg" > /dev/null || exit "${nL}"
fi

  set -x # <>

: 'gitignore (system)'
if ! [[ -f ${gitignr} ]] || ! grep --quiet swp "${gitignr}"
then
  cat <<- \EOF > "${tmpd}/ign"
	*~
	.*.swp
	.DS_Store

	EOF

  # shellcheck disable=SC2024 #(info): sudo doesn't affect redirects. Use sudo cat file | ..

sudo -- tee -- "${gitignr}" < "${tmpd}/ign" > /dev/null || exit "${nL}"
fi

  #exit $LINENO # <>     # <> ### ###


: 'Copy root-user files to $USER'
unset ff

for ff in "${gitmesg}" "${gitignr}"
do
  sudo -- rsync --checksum --archive -- "${ff}" ~
  sudo -- chown "${UID}:${UID}" -- ~/"${ff##*/}"
  chmod 0400 -- ~/"${ff##*/}"
done
unset gitmesg gitignr ff

: 'Rename files'
unset git_files_b ff
git_files_b=( ~/.git*_system )

for ff in "${git_files_b[@]}"
do
  sudo -- mv --force -- "${ff}" "${ff%_system}"
done
unset git_files_a git_files_b ff

: 'Make and change into directories'
umask 077
unset dev_d1 dev_d2 dd
dev_d1=~/MYPROJECTS
dev_d2=~/OTHERSPROJECTS

for dd in "${dev_d1}" "${dev_d2}"
do
  if ! [[ -d ${dd} ]]
  then
    mkdir --parents "${dd}" || exit "${nL}"
  fi
done
unset dev_d1 dev_d2 dd

## Note: in order to clone into any repo, and keep
#+  multiple repos separate, `cd` is required, or `pushd` / `popd`

: 'Change dirs'
pushd "${dev_d1}" || exit "${nL}"

: 'gh -- github CLI'
unset gh_config_list_out
gh_config_list_out=$( gh config list )

if ! [[ ${gh_config_list_out} =~ vim ]]
then
  gh config set editor 'vim'
fi

if ! [[ ${gh_config_list_out} =~ firefox ]]
then
  gh config set browser 'firefox'
fi

if ! [[ ${gh_config_list_out} =~ less ]]
then
  gh config set pager 'less'
fi

if ! [[ ${gh_config_list_out} =~ ssh ]]
then
  gh config set git_protocol 'ssh' --host 'github.com'
fi
unset gh_config_list_out

: 'Use GitHub CLI as a credential helper'
gh auth setup-git --hostname 'github.com'

: 'Log in'

## Note: executing this command just once

if ! gh auth status 2> /dev/null 1>&2 || [[ $( gh auth status |& grep --count $'\xe2\x9c\x93' ) -ne 4 ]]
then 

  ## Note: do not break this line with any backslashed newlines or it will fail and you'll have to refresh auth manually

  gh auth login --git-protocol 'ssh' --hostname 'github.com' --scopes 'admin:public_key,read:gpg_key,admin:ssh_signing_key' --web || exit "${nL}"
fi

: 'Clone repo'
[[ ${PWD} = ${dev_d1} ]] || er_x "${nL}"

if [[ ! -d ${scr_repo_nm} ]] || [[ ! -f ${scr_repo_nm}/README.md ]]
then
  git clone --origin 'github' "https://github.com/wileyhy/${scr_repo_nm}" || exit "${nL}"
fi

: 'Get SSH & GPG keys'
gh ssh-key list
gh gpg-key list

: 'Review auth'
gh auth status --show-token

: 'SSH'
unset ssh_d ssh_system_conf ssh_user_conf ssh_agent_pids ssh_agent_o ps_o awk_o pp

ssh_d=~/.ssh
ssh_system_conf=/etc/ssh_config
ssh_user_conf=~/.ssh/config

sudo -- chown "${UID}:${UID}" "${ssh_d}" || er_x "${nL}"
sudo -- chmod --recursive 700 "${ssh_d}"

if [[ -f ${ssh_user_conf} ]]
then
  if ! grep --quiet 'ForwardAgent yes' "${ssh_user_conf}"
  then
    cat <<- \EOF > "${ssh_user_conf}"
		Host github.com
		ForwardAgent yes

		EOF
  fi
fi

[[ -f ${ssh_system_conf} ]] && exit "${nL}"

## Bug? not necc to restart ssh-agent if both of these vars exist?

if [[ -z ${SSH_AUTH_SOCK} ]] || [[ -z ${SSH_AGENT_PID} ]]
then

  # shellcheck disable=SC2154

  ps_o=$( ps aux )
  awk_o=$( awk '$0 ~ /ssh-agent/ && $0 !~ /startx/ { print $2 }' <<< "${ps_o}" )

  if [[ -n ${awk_o} ]]
  then
    readarray -t ssh_agent_pids <<< "${awk_o}"
  fi

  if [[ ${#ssh_agent_pids[@]} -gt 0 ]]
  then
    case "${#ssh_agent_pids[@]}" in
      1)  if [[ -v SSH_AGENT_PID ]]
          then

            ## Note: `ssh-agent` doesn't have any long options. `ssh-agent -k` is "kill the current agent."

            ssh-agent -k
          else
            command -p kill "${ssh_agent_pids[*]}"
          fi
        ;;#
      *)  for pp in "${ssh_agent_pids[@]}"
          do
            command -p kill "${pp}"
          done
        ;;#
    esac
  fi

  ## Note: `ssh-agent -s` is "generate Bourne shell commands on stdout."

  ssh_agent_o=$( ssh-agent -s )
  eval "${ssh_agent_o}"

  ## Note: `ssh-add` and `ssh` don't have long options. `ssh-add -L` is "list;" `ssh -T` is "disable
  #+ pseudo-terminal allocation.

  ## Bug? hardcoded filename

  ssh-add ~/.ssh/id_ed25519
  ssh-add -L
  ssh -T git@github.com
fi

: 'GPG'
unset gpg_d
gpg_d=~/.gnupg
sudo -- chown "${UID}:${UID}" "${gpg_d}" || exit "${nL}"
sudo -- chmod --recursive 700 "${gpg_d}"

  # shellcheck disable=SC2009

if grep --quiet --extended-regexp '[g]pg-a.*daemon' <<< "${ps_o}"
then
  gpgconf --kill gpg-agent
fi

gpg-connect-agent /bye
GPG_TTY=$( tty )
export GPG_TTY

: 'Remind user of commands for the interactive shell'

  set -x # <>

popd || exit "${nL}"

if ! [[ ${PWD} = ${dev_d1}/${scr_repo_nm} ]]
then
  printf '\n\t Now run this command: \n'
  printf '\n\t cd "%s/%s" ; git status \n\n' "${dev_d1}" "${scr_repo_nm}"
fi

: 'Clean up & exit'
command rm --force --recursive "${tmpd}"
exit 00
