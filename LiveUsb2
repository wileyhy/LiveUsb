#!/bin/bash
## LiveUsb2
# shellcheck disable=SC2317

## Note: Online Git Pro book:
#+  https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository

# <> Debugging
set -aCuTeo pipefail # <>
umask 077
hash -r

: 'Environment'
# shellcheck disable=SC1001
declare -n nL=L\INENO
readonly nL
PATH='/usr/bin:/usr/sbin' || exit "${nL}"
scr_repo_nm=scf
fn_bndry=' ~~~ ~~~ ~~~ '
fn_lvl=0

: 'Functions'
function er_x(){ \
  local - exit_code="$?" _="${fn_bndry} er_x() BEGINS ${fn_bndry} ${fn_lvl} to $(( ++fn_lvl ))"
  set -
  printf '%s: Error: %s \n' "$0" "$*" 1>&2
  exit "${exit_code}"
}

: 'Regular users only'
if [[ ${UID} = 0 ]]
then
  printf '\n\t Must be a regular user and use sudo. \n\n'
  exit "${nL}"
else
  sudo --validate || exit "${nL}"
fi

## Bug? section "Network" is also present in LiveUsb1

: 'Network'
## Note: \x60ping\x60 doesn't have any long options. \x60ping -c\x60 is "count;" \x60ping -W\x60 is "timeout."
if ! sudo -- ping -c 1 -W 15 -- 8.8.8.8 > /dev/null
then
  sudo -- systemctl start NetworkManager.service
  wait -f
  sleep 15
  sudo -- ping -c 1 -W 15 -- 8.8.8.8 > /dev/null || exit "${nL}"
fi

## Note: git ui colors: normal black red green yellow blue magenta cyan white
#+  git ui attributes: bold dim ul (underline blink reverse)
## Note: In vim, since 'expandtab' is set in .vimrc, to make some actual tabs, press Ctrl-v-[tab]

## Bug? in vim, when quoting 'EOF', $git_tempd changes color, but bash still expands the redirection
#+ destination file.

: 'Git'

: 'Git parameters, dependency level 1'
git_conf_sys=''
git_config_sys_conf_file=/etc/gitconfig
git_files_a=( /etc/git* /etc/.git* )
git_files_b=( ~/.git*_system )
git_ignr=/etc/.gitignore_system
declare -A git_keys
git_keys=(
  ['color.diff']='always'
  ['color.diff.meta']='blue black bold'
  ['color.interactive']='always'
  ['color.ui']='true'
  ['commit.gpgsign']='true'
  ['core.editor']='vim'
  ['core.pager']='/usr/bin/less'
  ['gpg.program']='/usr/bin/gpg2'
  ['help.autocorrect']='prompt'
  ['init.defaultBranch']='main'
  ['user.email']='84648683+wileyhy@users.noreply.github.com'
  ['user.name']='Wiley Young'
  ['user.signingkey']='E287D0CF528591CE'
)
git_mesg=/etc/.gitmessage_system
git_tempd=$( TMPDIR='' mktemp --directory ) 
readonly git_tempd

: 'Git parameters, dependency level 2'
if [[ -f $git_config_sys_conf_file ]]
then
  git_conf_sys=$( sudo -- git config --system --list )
fi
git_keys+=(
  [commit.template]="${git_mesg}"
  [core.excludesfile]="${git_ignr}"
)

: 'Permissions'
for ff in "${git_files_a[@]}"
do
  [[ -e ${ff} ]] && sudo -- chmod 0604 --verbose -- "${ff}"
done
unset ff

: 'git config, remove a config if present'
#if grep --quiet gpg.format <<< "${git_conf_sys[@]}"
if grep gpg.format <<< "${git_conf_sys[@]}"
then
  sudo -- git config --system --unset gpg.format 
fi

: 'git config, assigning'
unset ii
for ii in "${!git_keys[@]}"
do
  echo "ii:$ii"

  #if ! grep --quiet "${git_keys[$ii]}" <<< "${git_conf_sys[@]}"
  
  if ! grep "${ii}=${git_keys[$ii]}" <<< "${git_conf_sys[@]}"
  then
    sudo -- git config --system "${ii}" "${git_keys[$ii]}"
  fi
done
unset ii

: 'gitmessage (system)'
if ! [[ -f ${git_mesg} ]]
then
  : 'Heredoc: gitmessage'
  cat <<- \EOF > "${git_tempd}/msg"
	Subject line (try to keep under 50 characters)

	Multi-line description of commit,
	feel free to be detailed.

	[Ticket: X]

	EOF

  ## Note: this use of  sudo  is for giving write permissions to  tee
  # shellcheck disable=SC2024 #(info): sudo doesn't affect redirects. Use sudo cat file | ..
  sudo -- tee -- "${git_mesg}" < "${git_tempd}/msg" > /dev/null || exit "${nL}"
fi

  #set -x # <>

: 'gitignore (system)'
#if ! [[ -f ${git_ignr} ]] || ! grep --quiet swp "${git_ignr}"
if ! [[ -f ${git_ignr} ]] || ! grep swp "${git_ignr}"
then
  : 'Heredoc: gitignore'
  cat <<- \EOF > "${git_tempd}/ign"
	*~
	.*.swp
	.DS_Store

	EOF

  ## Note: this use of  sudo  is for giving write permissions to  tee
  # shellcheck disable=SC2024
  sudo -- tee -- "${git_ignr}" < "${git_tempd}/ign" > /dev/null || exit "${nL}"
fi

  #exit $LINENO # <>     # <> ### ###

: 'Copy root-user files to USER'
for ff in "${git_mesg}" "${git_ignr}"
do
  sudo -- rsync --checksum --archive --verbose -- "${ff}" ~
  sudo -- chown "${UID}:${UID}" --verbose -- ~/"${ff##*/}"
  chmod 0400 -- ~/"${ff##*/}"
done
unset ff

: 'Rename files'

for ff in "${git_files_b[@]}"
do
  if [[ -e $ff ]]
  then
    sudo -- mv --force --verbose -- "${ff}" "${ff%_system}"
  fi
done
unset ff

## Clean up after section "Git"
unset git_files_a git_config_sys_conf_file git_conf_sys git_mesg git_ignr git_keys git_files_b

: 'Make and change into directories'

: 'Make dirs'
umask 077
## Note: these vars, dev_d{1,2}, will be used throughout the rest of this script
dev_d1=~/MYPROJECTS
dev_d2=~/OTHERSPROJECTS
readonly dev_d1
readonly dev_d2

for dd in "${dev_d1}" "${dev_d2}"
do
  if ! [[ -d ${dd} ]]
  then
    mkdir --parents --verbose "${dd}" || exit "${nL}"
  fi
done
unset dd

## Note: in order to clone into any repo, and keep multiple repos separate, \x60cd\x60 is required, or \x60pushd\x60 / 
#+  \x60popd\x60

: 'Change dirs'
pushd "${dev_d1}" || exit "${nL}"

  set -x # <>

: 'gh -- github CLI'
gh_config_list_out=$( gh config list | tr -d '\n' )

if ! [[ ${gh_config_list_out} =~ editor=vim ]]
then
  gh config set editor 'vim'
fi

if ! [[ ${gh_config_list_out} =~ browser=firefox ]]
then
  gh config set browser 'firefox'
fi

if ! [[ ${gh_config_list_out} =~ pager=less ]]
then
  gh config set pager 'less'
fi

if ! [[ ${gh_config_list_out} =~ git_protocol=ssh ]]
then
  gh config set git_protocol 'ssh' --host 'github.com'
fi
unset gh_config_list_out

: 'Use GitHub CLI as a credential helper'
gh auth setup-git --hostname 'github.com'

: 'Log in'

:;: 'Define a login command'
function gh_auth_login_command(){ :
  ## Note: do not break this line with any backslashed newlines or it will fail and you'll have to refresh auth manually
  if gh auth status 2> /dev/null 1>&2
  then
    gh auth logout 2> /dev/null 1>&2
  fi
  
  gh auth login --git-protocol 'ssh' --hostname 'github.com' --scopes 'admin:public_key,read:gpg_key,admin:ssh_signing_key' --web || 
    exit "${nL}"
}

: 'Login to github'
## Note: executing this command just once
if ! gh auth status 2> /dev/null 1>&2 || [[ $( gh auth status |& grep --count $'\xe2\x9c\x93' ) -ne 4 ]]
then
  gh_auth_login_command
fi

: 'Get SSH & GPG keys'
for cc in ssh-key gpg-key
do
  if ! gh "${cc}" list
  then
    gh_auth_login_command
  fi
done

: 'Review auth'
gh auth status --show-token

  exit $nL # <>

: 'Clone repo'
[[ ${PWD} = "${dev_d1}" ]] || er_x "${nL}"

if [[ ! -d ${scr_repo_nm} ]] || [[ ! -f ${scr_repo_nm}/README.md ]]
then
  git clone --origin 'github' "https://github.com/wileyhy/${scr_repo_nm}" || exit "${nL}"
fi

: 'SSH'
ssh_d=~/.ssh
ssh_system_conf=/etc/ssh_config
ssh_user_conf=~/.ssh/config

sudo -- chown "${UID}:${UID}" "${ssh_d}" || er_x "${nL}"
sudo -- chmod --recursive 700 "${ssh_d}"

if [[ -f ${ssh_user_conf} ]]
then
  if ! grep --quiet 'ForwardAgent yes' "${ssh_user_conf}"
  then
    cat <<- \EOF > "${ssh_user_conf}"
		Host github.com
		ForwardAgent yes

		EOF
  fi
fi

[[ -f ${ssh_system_conf} ]] && exit "${nL}"

## Bug? not necc to restart ssh-agent if both of these vars exist?

: $'Collect output of \x60ps\x60'
if [[ -o xtrace ]]
then
  set -
  ps_o=$( ps aux )
  set -x
else
  ps_o=$( ps aux )
fi
readonly ps_o

if [[ -z ${SSH_AUTH_SOCK} ]] || [[ -z ${SSH_AGENT_PID} ]]
then
  awk_o=$( awk '$0 ~ /ssh-agent/ && $0 !~ /startx/ { print $2 }' <<< "${ps_o}" )

  if [[ -n ${awk_o} ]]
  then
    readarray -t ssh_agent_pids <<< "${awk_o}"
  fi

  if [[ ${#ssh_agent_pids[@]} -gt 0 ]]
  then
    case "${#ssh_agent_pids[@]}" in
      1)  if [[ -v SSH_AGENT_PID ]]
          then

            ## Note: \x60ssh-agent\x60 doesn't have any long options. \x60ssh-agent -k\x60 is "kill the current agent."

            ssh-agent -k
          else
            command -p kill "${ssh_agent_pids[*]}"
          fi
        ;;#
      *)  for pp in "${ssh_agent_pids[@]}"
          do
            command -p kill "${pp}"
          done
        ;;#
    esac
  fi

  ## Note: \x60ssh-agent -s\x60 is "generate Bourne shell commands on stdout."

  ssh_agent_o=$( ssh-agent -s )
  eval "${ssh_agent_o}"

  ## Note: \x60ssh-add\x60 and \x60ssh\x60 don't have long options. \x60ssh-add -L\x60 is "list;" \x60ssh -T\x60 is "disable
  #+ pseudo-terminal allocation.

  ## Bug? hardcoded filename

  ssh-add ~/.ssh/id_ed25519
  ssh-add -L
  ssh -T git@github.com
fi

## Clean up from section "Ssh"
unset xon

: 'GPG'
gpg_d=~/.gnupg
sudo -- chown "${UID}:${UID}" "${gpg_d}" || exit "${nL}"
sudo -- chmod --recursive 700 "${gpg_d}"
if grep --quiet --extended-regexp '[g]pg-a.*daemon' <<< "${ps_o}"
then
  gpgconf --kill gpg-agent
fi

gpg-connect-agent /bye
GPG_TTY=$( tty )
export GPG_TTY

: 'Remind user of commands for the interactive shell'

  #set -x # <>

popd || exit "${nL}"

if ! [[ ${PWD} = ${dev_d1}/${scr_repo_nm} ]]
then
  printf '\n\t Now run this command: \n'
  printf '\n\t cd "%s/%s" ; git status \n\n' "${dev_d1}" "${scr_repo_nm}"
fi

: 'Clean up & exit'
command rm --force --recursive "${git_tempd}"
exit 00

