#!/bin/bash -eux

## Note, in case statements, the patterns can span more than one line. You just have to put a pipe
#+  immediately before the backslash at the end of the line

trap 'declare -p fn_command_line' RETURN

: 'Define rm()'
rm ()
{
  local - 
  #set -
  
  declare fn_command_line
  fn_command_line="${FUNCNAME[0]} $@"
 
    #declare -p fn_command_line
    #exit "$LINENO"

  :;: 'Input must exist'
  [[ ${#@} -eq 0 ]] && return "$LINENO"
    
  :;: 'For each positional parameter'
  local HH opts_rm args_rm
  
  for HH
  do
    : "1, $1"
    : "HH, $HH"

    : 'If "End of Options" has been reached'
    if ! [[ ${end_of_options:=} = 'has_been_reached' ]]
    then
      : $'No, so options continue and arguments aren\x60t yet processed'
      : 'Static options'
      case "${HH}" in
        --version )
          command rm --version
          ;;
        --help )
          command rm --help
          ;;
        -- )
          end_of_options='has_been_reached'
          : "HH, $HH"
          opts_rm+=( "${HH}" )
          ;;    
        -f|--force|-i|--interactive|--interactive=always|-I|--interactive=once|--interactive=never|\
        --one-file-system|--no-preserve-root|--preserve-root=all|-r|-R|--recursive|-d|--dir|-v|\
        --verbose )
          : "HH, $HH"
          opts_rm+=( "${HH}" )
          ;;    
        * )
          : 'No options found; options have concluded'
          end_of_options='has_been_reached'
          : 'Non-option arguments begin'
          
          : 'If there is no next pos-parm'
          if [[ -z ${2:-} ]] || ! [[ $2 = -- ]]
          then
            : '...then force end of arguments on the CLI'
            opts_rm+=( -- )
          else
            : $'...or if the next pos-parm isn\x60t a valid FSO'
            if ! [[ -e $2 ]] || ! [[ -d $2 ]] 
            then
              : '...then force end of arguments on the CLI'
              opts_rm+=( -- )
            fi
          fi

          case "${HH}" in
            * )
              if [[ -e ${HH} ]]
              then
                : "HH, $HH"
                args_rm+=( "${HH}" )
              
                  #: "ampersand, $@"
                  #exit "$LINENO"

              else
                printf '\n\tInvalid imput, %s\n\n' "${HH}"
              fi
              ;;
          esac
          ;;
      esac
    else 
      : 'Yes, so options are over and only arguments are processed'

      if [[ -e ${HH} ]]
      then
        : "HH, $HH"
        args_rm+=( "${HH}" )
      else
        printf '\n\tInvalid imput, %s\n\n' "${HH}"
        return "$LINENO"
      fi
    fi

    : 'Restart loop'
    shift
  done
  : 'End of loop'

  : 'Sanity check for options and arguments'
  [[ -z ${opts_rm:=} ]] && opts_rm=( -- )

    declare -p opts_rm args_rm fn_command_line
    echo rm "${opts_rm[@]}" "${args_rm[@]}"
    #exit $LINENO

  :;: '"Recycle bin" must exist'
  local delete_d 
  delete_d=~/rm.d

  if ! [[ -e ${delete_d} ]] || ! [[ -d ${delete_d} ]]
  then
      mkdir --mode 0700 --verbose -- "${delete_d}" || return $LINENO
  fi

  :;: 'If optargs exist, then  mv  the file into the recycle bucket'
  local time_sfx 
  time_sfx=$( date --utc +%s )

  if [[ -n ${args_rm[*]:0:8} ]]
  then
    ## Note: with the '--backup' and '--suffix' flags, `mv` doesn't append a timestamp as a suffix
    #+  on the first file moved into the "Recycle Bin"
    builtin command -- mv --verbose -- "${HH}" "${delete_d}/${HH}.${time_sfx}" || return $LINENO
  fi
}
declare -fx rm

touch foo 

## Command       ## Syntax
#rm foo          ##   success -- okay

#rm -f foo       ##   success -- okay 
rm foo -f       ##   
#rm -- foo       ## 
#rm foo --       ## 

#rm -f -- foo    ## 
#rm -- -f foo    ## 
#rm -f foo --    ## 
#rm foo -f --    ## 
#rm foo -- -f    ## 
#rm -- foo -f    ## 

#touch bar baz quux

